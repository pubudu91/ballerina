import ballerina/io;
import ballerina/mime;
import ballerina/http;

//=====================================
//============Client Config============
//=====================================
public type {{cut info.title " "}}ClientConfig record {
    string serviceUrl;
    http:ClientEndpointConfig clientConfig;
};

//==============================
//============Client============
//==============================
public type {{cut info.title " "}}Client client object {
    public http:Client clientEp;
    public {{cut info.title " "}}ClientConfig config;

    public function __init({{cut info.title " "}}ClientConfig config) {
        http:Client httpEp = new(config.serviceUrl, {auth: config.clientConfig.auth, cache: config.clientConfig.cache});
        self.clientEp = httpEp;
        self.config = config;
    }
{{#paths}}{{#value}}{{#operations}}{{#value}}{{#equals key "multi"}}{{#if methods}}{{#methods}}
    public remote function {{lower .}}{{operationId}}({{#pathParameters}}{{>pathParams}}{{#unless @last}}, {{/unless}}{{/pathParameters}}) returns http:Response | error {
        http:Client ep = self.clientEp;
        http:Request request = new;

        // TODO: Update the request as needed
    {{#equals . "GET"}}return check ep->{{lower .}}("{{../../../key}}", message = request);{{else}}{{#equals . "HEAD"}}
        return check ep->{{lower .}}("{{../../../key}}", message = request);{{else}}{{#equals . "OPTIONS"}}
        return check ep->{{lower .}}("{{../../../key}}", message = request);{{/equals}}{{/equals}}
        return check ep->{{lower .}}("{{../../../key}}", request);{{/equals}}
    }
    {{/methods}}{{else}}{{#allMethods}}
    public remote function {{lower .}}{{operationId}}({{#pathParameters}}{{>pathParams}}{{#unless @last}}, {{/unless}}{{/pathParameters}}) returns http:Response | error {
        http:Client ep = self.clientEp;
        http:Request request = new;

        // TODO: Update the request as needed{{#equals key "GET"}}
        return check _{{operationId}}Ep->{{lower .}}("{{../../../key}}", message = request);{{else}}{{#equals key "HEAD"}}
        return check _{{operationId}}Ep->{{lower .}}("{{../../../key}}", message = request);{{else}}{{#equals key "OPTIONS"}}
        return check _{{operationId}}Ep->{{lower .}}("{{../../../key}}", message = request);{{/equals}}{{/equals}}
        return check _{{operationId}}Ep->{{lower .}}("{{../../../key}}", request);{{/equals}}
    }
    {{/allMethods}}{{/if}}{{else}}
    public remote function {{operationId}}({{#requestBody}}{{>reqBody}}{{/requestBody}}{{#pathParameters}}{{>pathParams}}{{#unless @last}}, {{/unless}}{{/pathParameters}}) returns http:Response | error {
        http:Client _{{operationId}}Ep = self.clientEp;
        http:Request request = new;{{#requestBody}}{{#equals requestBody.selectedMedia.mediaType "application/json"}}
        json _{{operationId}}JsonBody = check json.constructFrom(_{{operationId}}Body);
        request.setPayload(_{{operationId}}JsonBody);{{else}}
        {{^requestBody.selectedMedia.schema.type}}{{#if requestBody.selectedMedia.schema.properties}}{{#requestBody}}{{#selectedMedia}}{{#schema}}{{#properties}}
        request.setPayload({{key}});{{/properties}}{{/schema}}{{/selectedMedia}}{{/requestBody}}{{/if}}{{/requestBody.selectedMedia.schema.type}}{{/equals}}{{/requestBody}}

        // TODO: Update the request as needed{{#equals key "GET"}}
        return check _{{operationId}}Ep->{{lower key}}("{{../../key}}", message = request);{{else}}{{#equals key "HEAD"}}
        return check _{{operationId}}Ep->{{lower key}}("{{../../key}}", message = request);{{else}}{{#equals key "OPTIONS"}}
        return check _{{operationId}}Ep->{{lower key}}("{{../../key}}", message = request);{{/equals}}{{/equals}}
        return check _{{operationId}}Ep->{{lower key}}("{{../../key}}", request);{{/equals}}
    }
    {{/equals}}{{/value}}{{/operations}}{{/value}}{{/paths}}
};
