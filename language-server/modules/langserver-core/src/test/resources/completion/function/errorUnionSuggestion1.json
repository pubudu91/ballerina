{
  "position": {
    "line": 23,
    "character": 13
  },
  "source": "function/source/errorUnionSuggestion1.bal",
  "items": [
    {
      "label": "reason()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error_  \n  \nReturns the error\u0027s reason string.\n  \n"
        }
      },
      "sortText": "130",
      "insertText": "reason()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a simple, human-readable representation of `value` as a string.\n  \n  \n  \n**Returns** `string`   \n- simple, human-readable string representation of `value`  \n  \n- if `value` is a string, then returns `value`  \n- if `value` is `()`, then returns an empty string  \n- if `value` is boolean, then the string `true` or `false`  \n- if `value` is an int, then return `value` represented as a decimal string  \n- if `value` is a float or decimal, then return `value` represented as a decimal string,  \n  with a decimal point only if necessary, but without any suffix indicating the type of `value`  \n  return `NaN`, `Infinity` for positive infinity, and `-Infinity` for negative infinity  \n- if `value` is a list, then returns the results toString on each member of the list  \n  separated by a space character  \n- if `value` is a map, then returns key\u003dvalue for each member separated by a space character  \n- if `value` is xml, then returns `value` in XML format (as if it occurred within an XML element)  \n- if `value` is table, TBD  \n- if `value` is an error, then a string consisting of the following in order  \n    1. the string `error`  \n    2. a space character  \n    3. the reason string  \n    4. if the detail record is non-empty  \n        1. a space character  \n        2. the result of calling toString on the detail record  \n- if `value` is an object, then  \n    - if `value` provides a `toString` method with a string return type and no required methods,  \n      then the result of calling that method on `value`  \n    - otherwise, `object` followed by some implementation-dependent string  \n- if `value` is any other behavioral type, then the identifier for the behavioral type  \n  (`function`, `future`, `service`, `typedesc` or `handle`)  \n  followed by some implementation-dependent string  \n  \nNote that `toString` may produce the same string for two Ballerina values  \nthat are not equal (in the sense of the `\u003d\u003d` operator).  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "stackTrace()(CallStack)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error_  \n  \nReturns an object representing the stack trace of the error.\n  \n  \n  \n**Returns** `CallStack`   \n- stack trace of the error value  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "stackTrace()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "detail()(RecordType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error_  \n  \nReturns the error\u0027s detail record as an immutable mapping.\n  \n  \n  \n**Returns** `RecordType`   \n- error detail value  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "detail()",
      "insertTextFormat": "Snippet"
    }
  ]
}