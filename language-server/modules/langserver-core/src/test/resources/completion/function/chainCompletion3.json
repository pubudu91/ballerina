{
  "position": {
    "line": 5,
    "character": 44
  },
  "source": "function/source/chainCompletion3.bal",
  "items": [
    {
      "label": "setText(string textContent, string contentType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given text content. This method overrides any existing content-type headers\nwith the default content-type `text/plain`. The default value `text/plain` can be overridden\nby passing the content type as an optional parameter.\n  \n**Params**  \n- `string` textContent: Text content that needs to be set to entity  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter. `text/plain`\n                is used as the default value.(Defaultable)  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter. `text/plain`\n                is used as the default value."
        }
      },
      "sortText": "121",
      "insertText": "setText(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getContentLength()((int|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content length of entity.\n  \n  \n  \n**Returns** `(int|error)`   \n- Content length as an `int`  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getContentLength()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getText()((string|mime:ParserError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nExtracts text body from the entity. If the entity body is not text compatible an error is returned.\n  \n  \n  \n**Returns** `(string|mime:ParserError)`   \n- `string` data extracted from the the entity body or `ParserError` in case of errors.  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getText()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setContentDisposition(mime:ContentDisposition contentDisposition)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content disposition of the entity.\n  \n**Params**  \n- `mime:ContentDisposition` contentDisposition: Content disposition that needs to be set to entity"
        }
      },
      "sortText": "121",
      "insertText": "setContentDisposition(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getJson()((json|mime:ParserError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nExtracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n  \n  \n  \n**Returns** `(json|mime:ParserError)`   \n- `json` data extracted from the the entity body. An `ParserError` record is returned in case of  \n           errors.  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getJson()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setHeader(string headerName, string headerValue)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the given header value against the existing header. If a header already exists, its value is replaced\nwith the given header value.\n  \n**Params**  \n- `string` headerName: The header name  \n- `string` headerValue: Represents the header value"
        }
      },
      "sortText": "121",
      "insertText": "setHeader(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "setBody((string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]) entityBody)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the body of the entity with the given content. Note that any string value is set as `text/plain`. To send a\nJSON-compatible string, set the content-type header to `application/json` or use the `setJsonPayload` method instead.\n  \n**Params**  \n- `(string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[])` entityBody: Entity body can be of the type `string`,`xml`,`json`,`byte[]`,`io:ReadableByteChannel`, or `Entity[]`."
        }
      },
      "sortText": "121",
      "insertText": "setBody(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getBodyParts()((mime:Entity[]|mime:ParserError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets its body parts. If the entity body is not a set of body parts an error will be returned.\n  \n  \n  \n**Returns** `(mime:Entity[]|mime:ParserError)`   \n- An array of body parts(`Entity[]`) extracted from the entity body. An `ParserError` record will be  \n           returned in case of errors.  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getBodyParts()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getHeaderNames()(string[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets all header names.\n  \n  \n  \n**Returns** `string[]`   \n- All header names as a `string[]`  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getHeaderNames()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "removeHeader(string headerName)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nRemoves the given header from the entity.\n  \n**Params**  \n- `string` headerName: Represents the header name"
        }
      },
      "sortText": "121",
      "insertText": "removeHeader(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "setContentId(string contentId)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content ID of the entity.\n  \n**Params**  \n- `string` contentId: Content ID that needs to be set to entity"
        }
      },
      "sortText": "121",
      "insertText": "setContentId(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getXml()((xml|mime:ParserError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nExtracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n  \n  \n  \n**Returns** `(xml|mime:ParserError)`   \n- `xml` data extracted from the the entity body. An `ParserError` record is returned in case of  \n           errors.  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getXml()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getContentId()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content ID of entity.\n  \n  \n  \n**Returns** `string`   \n- Content ID as a `string`  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getContentId()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cLength",
      "kind": "Variable",
      "detail": "int",
      "sortText": "221",
      "insertText": "cLength",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getBodyPartsAsChannel()((io:ReadableByteChannel|mime:ParserError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets the body parts as a byte channel.\n  \n  \n  \n**Returns** `(io:ReadableByteChannel|mime:ParserError)`   \n- Body parts as a byte channel  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getBodyPartsAsChannel()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setXml(xml xmlContent, string contentType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given XML content. This method overrides any existing content-type headers\nwith the default content-type `application/xml`. The default value `application/xml` can be overridden\nby passing the content-type as an optional parameter.\n  \n**Params**  \n- `xml` xmlContent: XML content that needs to be set to entity  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter. `application/xml`\n                is used as the default value.(Defaultable)  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter. `application/xml`\n                is used as the default value."
        }
      },
      "sortText": "121",
      "insertText": "setXml(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "hasHeader(string headerName)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nChecks whether the requested header key exists in the header map.\n  \n**Params**  \n- `string` headerName: The header name  \n  \n**Returns** `boolean`   \n- True if the specified header key exists  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "hasHeader(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cId",
      "kind": "Variable",
      "detail": "string",
      "sortText": "221",
      "insertText": "cId",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setFileAsEntityBody(string filePath, string contentType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with a given file. This method overrides any existing `content-type` headers\nwith the default content type `application/octet-stream`. The default value `application/octet-stream`\ncan be overridden by passing the content type as an optional parameter.\n  \n**Params**  \n- `string` filePath: Represents the path to the file  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value.(Defaultable)  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value."
        }
      },
      "sortText": "121",
      "insertText": "setFileAsEntityBody(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getContentType()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content type of entity.\n  \n  \n  \n**Returns** `string`   \n- Content type as a `string`  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getContentType()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "removeAllHeaders()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nRemoves all headers associated with the entity.  \n"
        }
      },
      "sortText": "121",
      "insertText": "removeAllHeaders();",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setByteChannel(io:ReadableByteChannel byteChannel, string contentType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given byte channel content. This method overrides any existing content-type headers\nwith the default content-type `application/octet-stream`. The default value `application/octet-stream`\ncan be overridden by passing the content-type as an optional parameter.\n  \n**Params**  \n- `io:ReadableByteChannel` byteChannel: Byte channel that needs to be set to entity  \n- `string` contentType: Content-type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value.(Defaultable)  \n- `string` contentType: Content-type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value."
        }
      },
      "sortText": "121",
      "insertText": "setByteChannel(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cType",
      "kind": "Variable",
      "detail": "mime:MediaType",
      "sortText": "221",
      "insertText": "cType",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setContentLength(int contentLength)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content length of the entity.\n  \n**Params**  \n- `int` contentLength: Content length that needs to be set to entity"
        }
      },
      "sortText": "121",
      "insertText": "setContentLength(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getHeaders(string headerName)(string[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets all the header values associated with the given header name.\n  \n**Params**  \n- `string` headerName: The header name  \n  \n**Returns** `string[]`   \n- All the header values associated with the given header name as a `string[]`. An exception is thrown  \n           if no header is found. Use `hasHeader()` beforehand to check the existence of header.  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getHeaders(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "addHeader(string headerName, string headerValue)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nAdds the given header value against the given header.\n  \n**Params**  \n- `string` headerName: The header name  \n- `string` headerValue: Represents the header value to be added"
        }
      },
      "sortText": "121",
      "insertText": "addHeader(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getByteChannel()((io:ReadableByteChannel|mime:ParserError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets the entity body as a byte channel.\n  \n  \n  \n**Returns** `(io:ReadableByteChannel|mime:ParserError)`   \n- An `io:ReadableByteChannel`. An `ParserError` record will be returned in case of errors  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getByteChannel()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getContentDisposition()(mime:ContentDisposition)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content disposition of entity.\n  \n  \n  \n**Returns** `mime:ContentDisposition`   \n- A `ContentDisposition` object  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getContentDisposition()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setBodyParts(mime:Entity[] bodyParts, string contentType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets body parts to entity. This method overrides any existing `content-type` headers\nwith the default content type `multipart/form-data`. The default value `multipart/form-data` can be overridden\nby passing the content type as an optional parameter.\n  \n**Params**  \n- `mime:Entity[]` bodyParts: Represents the body parts that needs to be set to the entity  \n- `string` contentType: Content-type to be used with the payload. This is an optional parameter.\n                `multipart/form-data` is used as the default value.(Defaultable)  \n- `string` contentType: Content-type to be used with the payload. This is an optional parameter.\n                `multipart/form-data` is used as the default value."
        }
      },
      "sortText": "121",
      "insertText": "setBodyParts(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "setByteArray(byte[] blobContent, string contentType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given byte[] content. This method overrides any existing `content-type` headers\nwith the default content type `application/octet-stream`. The default value `application/octet-stream`\ncan be overridden by passing the content type as an optional parameter.\n  \n**Params**  \n- `byte[]` blobContent: byte[] content that needs to be set to entity  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value.(Defaultable)  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value."
        }
      },
      "sortText": "121",
      "insertText": "setByteArray(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getByteArray()((byte[]|mime:ParserError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets the entity body as a `byte[]`. If the entity size is considerably large consider\nusing getByteChannel() method instead.\n  \n  \n  \n**Returns** `(byte[]|mime:ParserError)`   \n- `byte[]` data extracted from the the entity body. An `ParserError` record is returned in case of  \n           errors.  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getByteArray()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setContentType(string mediaType)((()|mime:InvalidContentTypeError))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content-type to entity.\n  \n**Params**  \n- `string` mediaType: Content type that needs to be set to the entity  \n  \n**Returns** `(()|mime:InvalidContentTypeError)`   \n- Nil if successful, error in case of invalid media-type  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "setContentType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getHeader(string headerName)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the header value associated with the given header name.\n  \n**Params**  \n- `string` headerName: Represents header name  \n  \n**Returns** `string`   \n- Header value associated with the given header name as a `string`. If multiple header values are  \n           present, then the first value is returned. An exception is thrown if no header is found. Use  \n           `hasHeader()` beforehand to check the existence of header.  \n  \n"
        }
      },
      "sortText": "121",
      "insertText": "getHeader(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cDisposition",
      "kind": "Variable",
      "detail": "mime:ContentDisposition",
      "sortText": "221",
      "insertText": "cDisposition",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setJson(json jsonContent, string contentType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given `json` content. This method overrides any existing `content-type` headers\nwith the default content type `application/json`. The default value `application/json` can be overridden\nby passing the content type as an optional parameter.\n  \n**Params**  \n- `json` jsonContent: JSON content that needs to be set to entity  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter. `application/json`\n                is used as the default value.(Defaultable)  \n- `string` contentType: Content type to be used with the payload. This is an optional parameter. `application/json`\n                is used as the default value."
        }
      },
      "sortText": "121",
      "insertText": "setJson(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}