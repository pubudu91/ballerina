import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('salary')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('EmployeeSalary')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('salary')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates an in-memory `table` constrained by the `Employee` type with the `id` marked as the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// primary key in the column descriptor. Three data records are inserted into the `table`. The order of')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the data values should match the order of the column descriptor.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Employee')
> ('>')
WHITE_SPACE (' ')
identifier ('tbEmployee')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
table ('table')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
identifier ('id')
, (',')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
[ ('[')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Mary"')
, (',')
WHITE_SPACE ('  ')
DECIMAL_FLOATING_POINT_NUMBER ('300.5')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n          ')
{ ('{')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE ('  ')
DECIMAL_FLOATING_POINT_NUMBER ('200.5')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n          ')
{ ('{')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jim"')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('330.5')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n        ')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This prints the `table` data.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"Table Information: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('tbEmployee')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Creates `Employee` records.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jane"')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('300.50')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('100.50')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('400.50')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('150.0')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates an in-memory `table` constrained by the `Employee` type with the `id` as the primary key.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Two records are inserted into the `table`.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Employee')
> ('>')
WHITE_SPACE (' ')
identifier ('tb')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
table ('table')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
identifier ('id')
, (',')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
[ ('[')
identifier ('e1')
, (',')
WHITE_SPACE (' ')
identifier ('e2')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Employee')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('employees')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('e3')
, (',')
WHITE_SPACE (' ')
identifier ('e4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This adds the created records to the `table`.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('emp')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('employees')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tb')
. ('.')
identifier ('add')
( ('(')
identifier ('emp')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('ret')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Adding record to table successful"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Adding to table failed: "')
, (',')
WHITE_SPACE (' ')
identifier ('ret')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This prints the `table` data.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Table Information: "')
, (',')
WHITE_SPACE (' ')
identifier ('tb')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This accesses rows using the `foreach` loop.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Using foreach: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('tb')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Name: "')
, (',')
WHITE_SPACE (' ')
identifier ('x')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This accesses rows using the `while` loop.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Using while loop: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('tb')
. ('.')
identifier ('hasNext')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tb')
. ('.')
identifier ('getNext')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('ret')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Employee')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Name: "')
, (',')
WHITE_SPACE (' ')
identifier ('ret')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error in get employee from table"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This converts the `table` to JSON format.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('retValJson')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
typedesc ('typedesc')
< ('<')
json ('json')
> ('>')
. ('.')
identifier ('constructFrom')
( ('(')
identifier ('tb')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('retValJson')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"JSON: "')
, (',')
WHITE_SPACE (' ')
identifier ('retValJson')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error in table to json conversion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This converts the `table` to XML format.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('retValXml')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
typedesc ('typedesc')
< ('<')
xml ('xml')
> ('>')
. ('.')
identifier ('constructFrom')
( ('(')
identifier ('tb')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('retValXml')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
xml ('xml')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"XML: "')
, (',')
WHITE_SPACE (' ')
identifier ('retValXml')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error in table to xml conversion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
