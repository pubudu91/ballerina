import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `main` function performs a math operation. The first parameter `operation`')
WHITE_SPACE ('\n')
LINE_COMMENT ('// represents the math operation while the second parameter `initialValue` is a defaultable')
WHITE_SPACE ('\n')
LINE_COMMENT ('// parameter with the default value `0` representing the base value upon which the operation')
WHITE_SPACE ('\n')
LINE_COMMENT ('// should be performed. The rest parameter `values` represents the additional arguments.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The `main` function may return an `error` or `()`.')
WHITE_SPACE ('\n')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('operation')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('initialValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
int ('int')
... ('...')
WHITE_SPACE (' ')
identifier ('values')
) (')')
WHITE_SPACE ('\n                    ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('initialValue')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('operation')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"add"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('intValue')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('values')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('value')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('intValue')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Result: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('operation')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"subtract"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('intValue')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('values')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('value')
WHITE_SPACE (' ')
-= ('-=')
WHITE_SPACE (' ')
identifier ('intValue')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Result: "')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('unknownOpError')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"unknown operation"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('unknownOpError')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
