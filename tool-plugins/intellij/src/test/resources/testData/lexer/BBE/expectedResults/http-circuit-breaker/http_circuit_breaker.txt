import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Circuit Breakers are used to protect against distributed failure.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The circuit breaker looks for errors across a rolling time window.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// After the circuit is broken, it does not send requests to')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the backend until the `resetTime`.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('backendClientEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"http://localhost:8080"')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Circuit breaker configuration options that control the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// behavior of the Ballerina circuit breaker.')
WHITE_SPACE ('\n        ')
identifier ('circuitBreaker')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Failure calculation window. This is how long Ballerina')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// circuit breaker keeps the statistics for the operations.')
WHITE_SPACE ('\n            ')
identifier ('rollingWindow')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n                ')
LINE_COMMENT ('// Time period in milliseconds for which the failure threshold')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// is calculated.')
WHITE_SPACE ('\n                ')
identifier ('timeWindowInMillis')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000')
, (',')
WHITE_SPACE ('\n\n                ')
LINE_COMMENT ('// The granularity at which the time window slides.')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// This is measured in milliseconds.')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// The `RollingWindow` is divided into buckets')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('//  and slides by these increments.')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// For example, if this `timeWindowInMillis` is set to')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// 10000 milliseconds and `bucketSizeInMillis` 2000.')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Then `RollingWindow` breaks into sub windows with')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// 2-second buckets and stats are collected with')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// respect to the buckets. As time rolls a new bucket')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// will be appended to the end of the window and the')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// old bucket will be removed.')
WHITE_SPACE ('\n                ')
identifier ('bucketSizeInMillis')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2000')
, (',')
WHITE_SPACE ('\n\n                ')
LINE_COMMENT ('// Minimum number of requests in a `RollingWindow`')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// that will trip the circuit.')
WHITE_SPACE ('\n                ')
identifier ('requestVolumeThreshold')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
WHITE_SPACE ('\n\n            ')
} ('}')
, (',')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The threshold for request failures.')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// When this threshold exceeds, the circuit trips.')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This is the ratio between failures and total requests')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//  and the ratio is considered only within the configured')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `RollingWindow`.')
WHITE_SPACE ('\n            ')
identifier ('failureThreshold')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('0.2')
, (',')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('// The time period (in milliseconds) to wait before')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// attempting to make another request to the upstream service.')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// When the failure threshold exceeds, the circuit trips to')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `OPEN` state. Once the circuit is in `OPEN` state')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// circuit breaker waits for the time configured in `resetTimeInMillis`')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// and switch the circuit to the `HALF_OPEN` state.')
WHITE_SPACE ('\n            ')
identifier ('resetTimeInMillis')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000')
, (',')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('// HTTP response status codes that are considered as failures')
WHITE_SPACE ('\n            ')
identifier ('statusCodes')
: (':')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('400')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('404')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
] (']')
WHITE_SPACE ('\n\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('timeoutInMillis')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2000')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create an HTTP service bound to the endpoint (circuitBreakerEP).')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/cb"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('circuitbreaker')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a REST resource within the API.')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The parameters include a reference to the caller')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and an object of the request data.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('invokeEndpoint')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('backendResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('backendClientEP')
-> ('->')
identifier ('forward')
( ('(')
QUOTED_STRING_LITERAL ('"/hello"')
, (',')
WHITE_SPACE (' ')
identifier ('request')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The `is` operator is used to separate out union-type returns.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The type of `backendResponse` variable is the union of `http:Response` and `error`.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If a response is returned, `backendResponse` is treated as an `http:Response`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// within the if-block and the normal process runs.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the service returns an `error`, `backendResponse` is implicitly')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// converted to an `error` within the else block.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('backendResponse')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('responseToCaller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('backendResponse')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('responseToCaller')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('responseToCaller')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('STATUS_INTERNAL_SERVER_ERROR')
; (';')
WHITE_SPACE ('\n            ')
identifier ('response')
. ('.')
identifier ('setPayload')
( ('(')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('backendResponse')
. ('.')
identifier ('detail')
( ('(')
) (')')
OPTIONAL_FIELD_ACCESS ('?.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('responseToCaller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('responseToCaller')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('responseToCaller')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
int ('int')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This sample service is used to mock connection timeouts and service outages.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Mock a service outage by stopping/starting this service.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// This should run separately from the `circuitBreakerDemo` service.')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('helloWorld')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('8080')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('sayHello')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('counter')
WHITE_SPACE (' ')
% ('%')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Delay the response by 5000 milliseconds to')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// mimic the network level delays.')
WHITE_SPACE ('\n            ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('5000')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Hello World!!!"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response from mock service"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('counter')
WHITE_SPACE (' ')
% ('%')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"Internal error occurred while processing the request."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response from mock service"')
, (',')
WHITE_SPACE ('\n                               ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Hello World!!!"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n               ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response from mock service"')
, (',')
WHITE_SPACE ('\n                               ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
